<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_446314_isilon_se.Isilon_VRO_RestApi</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Isilon_VRO_RestApi</name>
        <script><![CDATA[var MAX_TRIES = 10;
var SLEEP_TIME_MS = 5000;
// gs.sleep() scoping workaround - it is MUCH better to use a globally scoped
// sleep() wrapper around gs.sleep()
function sleep(ms) {
  var endSleep = new GlideDuration().getNumericValue() + ms;
  while ( new GlideDuration().getNumericValue() < endSleep) {
   //wait 
  }

  return;
}

var Isilon_VRO_RestApi = Class.create();
Isilon_VRO_RestApi.prototype =  {
	_restErr: "",
	_endpoint_Sysid: null,
	_controlRecord: null,
    isAuthorized: false,
	
	setRestErr: function(error) {
		if (!gs.nil(this._restErr)){
			this._restErr += "\n";
		}
		this._restErr += restErr;
	},
	
	executeWorkflow: function(url, data) {
		var response = this.RESTCall(url, 'post', data);
		var location = response.getHeader("Location");
		if (!location) {
			throw 'Error: no location in response header of vro request';
		}
		response = this.restGet(location + 'state');
		var rBody = JSON.parse(response.getBody());
		gs.info('first response body: ' + rBody);
		var status = rBody.value;
		gs.info('first status: ' + status);
		
		var counter = 0;
		while(status == 'running' && counter++ < MAX_TRIES) {
			sleep(SLEEP_TIME_MS);
			response = this.restGet(location + 'state');
			rBody = JSON.parse(response.getBody());
			gs.info('   response: ' + JSON.stringify(response));
			gs.info('   response body: ' + rBody);
			status = rBody.value;
			gs.info('   status: ' + status);
		}
		gs.info('final status: ' + status);
		if(status !== 'completed') {
			throw 'Error executing workflow, status: ' + status + ' tries: ' + counter;
		}
		return response;
	},
	
	restGet: function(url) {
		var r = this._setRestRequestIgnoreBaseUrl(url, 'get');
		var response = r.execute();
        response.waitForResponse(300);
        if (response.haveError()) {
            gs.info("restGet call has error: " + response.getErrorMessage());
			throw "restGet call has error: " + response.getErrorMessage();
        }
		return response;
	},
	
    RESTCall: function(url, method, jsonData) {
        var restErr = "";
        try {
            restErr = "RESTCall URL: " + url + ", method: " + method + ". ";
            gs.info(restErr);
            gs.info("RESTCall Json: " + jsonData);

            var r = this._setRestRequest(url, method);
            if (method == "post" && jsonData) {
				var jsonDat = this.toJSON(jsonData);
                r.setRequestBody(jsonDat);
            }
            var response = r.execute();
            response.waitForResponse(300);
            if (response.haveError()) {
                gs.info("RESTCall call has error: " + response.getErrorMessage());
            }

            var httpStatus = response.getStatusCode();
            gs.info("RESTCall HTTP Status Code: " + httpStatus + "response: " + response.getBody());
            if ((httpStatus == 200 || httpStatus == 201 || httpStatus == 202 || httpStatus == 204)) { // || httpStatus == 404
				gs.debug(response.haveError);
                if (response.haveError()) {
                    var restErr2 = "Success (" + httpStatus + ") with error message: " + response.getErrorMessage() + " ";
                    gs.debug(restErr2);
                    restErr += restErr2;
                }
                return response; //this._returnRESTCallResult(response, method, httpStatus, restErr);
            } else {
                var restErr4 = "RESTCall failed: " + response.getErrorMessage() + ". Http Status: " + httpStatus + " ";
                gs.debug(restErr4);
                restErr += restErr4;
                this.setRestErr(restErr);
                return {
                    statusCode: 2,
                    error: restErr4,
                    httpStatus: httpStatus
                };
            }
        } catch (ex) {
            var err = "RESTCall throw error: " + ex;
            gs.info(err);
            restErr += err;
            //this.setRestErr(restErr);
            return {
                statusCode: 3,
                error: restErr,
                httpStatus: 500
            };

        } finally {
            gs.info("RESTCall Completed");
        }
    },
	
	_returnRESTCallResult: function(response, method, httpStatus, restErr){
		var responseBody = response.getBody();
		if(method == "post"){
			return this._returnPostResponse(response, httpStatus, responseBody); 
		}
		if(method == "get") {
			return {statusCode: 200, responseBody: responseBody, httpStatus: httpStatus};
		}
		if(responseBody != null)
			return {statusCode: 0, responseBody: responseBody, httpStatus: httpStatus}; 
		else{
			var restErr3 = "RESTCall call return " + httpStatus + " but response body is null. ";
			gs.info(restErr3);
			restErr += restErr3;
			this.setRestErr(restErr);
			return {statusCode: 1, error: restErr, httpStatus: httpStatus};
		}		
	},
	
	_returnPostResponse: function(response, httpStatus, responseBody){
		return {statusCode: 0, responseBody: responseBody, httpStatus: httpStatus}; 
	},

    initialize: function(endpoint_Sysid, doInit) {
		this.endpoint_Sysid = endpoint_Sysid;
        this._controlRecord = this._getEndpointSetting(endpoint_Sysid);
		if(doInit == undefined || doInit === true){
			this._init();	
		}
    },

    _getEndpointSetting: function(endpoint_Sysid) {
        var rec = new GlideRecord('x_446314_isilon_se_vro_endpoint_setting');
        //rec.get(endpoint_Sysid);
		gs.info(endpoint_Sysid);
		var returnValue = rec.get(endpoint_Sysid);
		gs.info(returnValue); // logs true or false
        return rec;
    },

    _init: function() {
        var auth_type = this._controlRecord.authorization_type.toString();
        switch (auth_type) {
            case "Token":
                this.getToken();
                break;
        }
    },

    getToken: function() {
        this.setAuthorized(false);
    },

    setAuthorized: function(auth) {
        this._isAuthorized = auth;
    },

    _setRestRequest: function(extraURL, method) {
        var r = new sn_ws.RESTMessageV2();
        r.setRequestHeader("Content-Type", "application/json");
        r.setRequestHeader("Accept", "application/json");
        gs.info("Authorized: " + this._isAuthorized);
        if (this._isAuthorized) {
            r.setRequestHeader("Authorization", this.getToken());
        }
        if (this._controlRecord.authorization_type.toString() == 'Token') {
            var password = this._controlRecord.password.toString();
            var username = this._controlRecord.username.toString();
            gs.info("Basic Auth, user name: " + username);
            r.setBasicAuth(username, password);
        }

        r.setHttpMethod(method);
		
		if(!(this._controlRecord.mid_server_list.nil())){
			var mid = new GlideRecord('ecc_agent');
			var sysids = this._controlRecord.mid_server_list.split(',');
			mid.get(sysids[0]);
			gs.info("mid server = " + mid.name.toString());
			r.setMIDServer(mid.name.toString());
		}

        var baseUrl = this._controlRecord.base_url.toString();
        if (baseUrl.charAt((baseUrl.length - 1) != "/")) {
            baseUrl = baseUrl + "/";
        }
        var url = baseUrl + extraURL;
        gs.info("CS: URL: " + url);
        r.setEndpoint(url);
        return r;
    },
	
	_setRestRequestIgnoreBaseUrl: function(url, method) {
        var r = new sn_ws.RESTMessageV2();
        r.setRequestHeader("Content-Type", "application/json");
        r.setRequestHeader("Accept", "application/json");
        gs.info("Authorized: " + this._isAuthorized);
        if (this._isAuthorized) {
            r.setRequestHeader("Authorization", this.getToken());
        }
        if (this._controlRecord.authorization_type.toString() == 'Token') {
            var password = this._controlRecord.password.toString();
            var username = this._controlRecord.username.toString();
            gs.info("Basic Auth, user name: " + username);
            r.setBasicAuth(username, password);
        }

        r.setHttpMethod(method);
		
		if(!(this._controlRecord.mid_server_list.nil())){
			var mid = new GlideRecord('ecc_agent');
			var sysids = this._controlRecord.mid_server_list.split(',');
			mid.get(sysids[0]);
			gs.info("mid server = " + mid.name.toString());
			r.setMIDServer(mid.name.toString());
		}

        gs.info("CS: URL: " + url);
        r.setEndpoint(url);
        return r;
    },
	
	toJSON: function(obj){
		var json = new global.JSON();
		var val =  json.encode(obj);
		gs.info(val);
		return val;
	},

    type: 'Isilon_VRO_RestApi'
};

Isilon_VRO_RestApi.get = function(endpoint_Sysid) {
	return new Isilon_VRO_RestApi(endpoint_Sysid);
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-02-14 17:00:03</sys_created_on>
        <sys_id>cc903510db470010fc3770e2399619dc</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>Isilon_VRO_RestApi</sys_name>
        <sys_package display_value="Isilon Service Catalog" source="x_446314_isilon_se">cbcd5554dbc30010fc3770e2399619a4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Isilon Service Catalog">cbcd5554dbc30010fc3770e2399619a4</sys_scope>
        <sys_update_name>sys_script_include_cc903510db470010fc3770e2399619dc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-02-20 23:02:46</sys_updated_on>
    </sys_script_include>
</record_update>
